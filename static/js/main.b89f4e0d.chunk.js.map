{"version":3,"sources":["components/button/Button.js","components/timer-diplay/TimerDisplay.js","App.js","serviceWorker.js","index.js"],"names":["Button","React","memo","_ref","text","className","onClick","react_default","a","createElement","concat","hours","minutes","seconds","document","title","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timer","duration","pause","clear","bind","assertThisInitialized","start","setState","clearInterval","interval","_this2","setInterval","subtract","timerAction","timerActionName","timerClassName","_this$state","asSeconds","components_timer_diplay_TimerDisplay","components_button_Button","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b89f4e0d.chunk.js","sourcesContent":["import React from 'react'\nimport './Button.css'\nconst Button = React.memo(function Button ({ text, className, onClick }) {\n  return (\n    <button\n      className={`Button ${className}`}\n      onClick={() => onClick()}\n    >\n      { text }\n    </button>\n  )\n})\n\nexport default Button\n","import React, { memo } from 'react'\nimport './TimerDisplay.css'\n\nconst TimerDisplay = ({ hours, minutes, seconds }) => {\n  document.title = `${hours}:${minutes}:${seconds}`\n\n  return (\n    <span className=\"timer-info\">{ `${hours}:${minutes}:${seconds}` }</span>\n  )\n}\n\nexport default memo(TimerDisplay)\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { duration } from 'moment'\n\nimport Button from './components/button/Button'\nimport TimerDisplay from './components/timer-diplay/TimerDisplay'\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      timer: duration(25, 'minutes'),\n      pause: true\n    }\n\n    this.clear = this.clear.bind(this)\n    this.pause = this.pause.bind(this)\n    this.start = this.start.bind(this)\n  }\n\n  interval\n\n  clear () {\n    this.setState({ timer: duration(25, 'minutes'), pause: true })\n    clearInterval(this.interval)\n  }\n\n  pause () {\n    this.setState({ pause: true })\n    clearInterval(this.interval)\n  }\n\n  start () {\n    this.setState({ pause: false })\n    const { timer } = this.state\n\n    this.interval = setInterval(() => {\n      timer.subtract(1, 'second')\n      this.setState(timer)\n    }, 1000)\n  }\n\n  timerDone () {\n    \n  }\n\n  render () {\n    const { timer, pause } = this.state\n    let timerAction\n    let timerActionName\n    let timerClassName\n\n    if (pause) {\n      timerAction = this.start\n      timerActionName = 'Start'\n      timerClassName = 'start'\n    } else {\n      timerAction = this.pause\n      timerActionName = 'Pause'\n      timerClassName = 'pause'\n    }\n\n    const timerIsDone = timer.asSeconds() === 0\n    if (timerIsDone) {\n      this.pause();\n    }\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"main-title\">Pomodorizador</h1>\n        <TimerDisplay\n          hours={timer.hours()}\n          minutes={timer.minutes()}\n          seconds={timer.seconds()}\n        >\n        </TimerDisplay>\n        <div className=\"actions\">\n          <Button\n            text={timerActionName}\n            onClick={timerAction}\n            className={timerClassName}\n          />\n          <Button\n            text=\"Clear\"\n            onClick={this.clear}\n            className=\"clear\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}